ALGORITMOS: PRÁCTICA 4.
Rodrigo Arias Mallo; login: rodrigo.arias
Carlos Pérez Ramil; login: c.pramil


Verificación empírica del análisis del algoritmo de Prim.


Características de la máquina donde fue realizado el experimento:
	- Procesador Intel(R) Core(TM) i7 CPU Q 720  @ 1.60GHz
	- Memoria RAM 4GB


Realizaremos  un  análisis de la  eficiencia  del algoritmo de  Prim,  que tiene
como objetivo hallar el árbol de  recubrimiento  mínimo de un  grafo completo no
dirigido.  Para  este  experimento  utilizaremos  una matriz de  adyacencia como
representación del grafo, y un vector de aristas  (una estructura  compuesta por
dos nodos y un peso) para representar el ARM.  Nos  centraremos en el estudio de
los tiempos de ejecución, que serán medidos siempre en microsegundos.

Conceptualmente,  el algoritmo de  Prim  obtiene  el ARM de un grafo  utilizando
un conjunto B que contendrá los nodos integrandes del ARM.  Este  conjunto  está
inicialmente vacío y va creciendo a medida que se seleccionan los nodos, al con-
trario del algoritmo de Kruskal,  el cual parte de  n  conjuntos formados por un
único nodo, y los va asociando para alcanzar un árbol. 

Nuestro caso de estudio es un algoritmo voraz. El proceso consiste en  examinar,
por cada iteración, todas las aristas que tienen un extremo en el  conjunto  B y
otro fuera de él, y seleccionar la que tenga menor peso.  Cuando todos los nodos
del grafo pertenezcan a B, el proceso habrá finalizado.

Para la  implementación  utilizaremos: un vector  MasProximo  (de tamaño n), que
almacenará,  para cada nodo,  el  perteneciente a B más próximo;  y otro  vector 
DistanciaMinima que guardará, para cada nodo,  su distancia al conjunto B,  o lo
que es lo mismo, el peso de la arista que lo une con su nodo más próximo.

	función Prim ( M[1..n, 1..n] )
		T := 0 ;	/* T está vacío al inicio */
		DistanciaMinima[1] = -1 ;
		para i := 2 hasta n hacer
			MasProximo[i] := 1 ;
			DistanciaMinima[i] := M[i,1]
		fin para ;
		repetir n-1 veces /* bucle voraz */
			min := ∞ ;
			para j := 2 hasta n hacer
				si 0 <= DistanciaMinima [j] < min entonces
					min := DistanciaMinima [j] ;
					k := j
				fin si
			fin para ;
			T := T ∪ {(MasProximo[k], k)} ;
			DistanciaMinima[k] := -1;
			para j := 2 hasta n hacer
				si M[j, k] < DistanciaMinima[j] entonces
					DistanciaMinima[j] := M[j, k] ;
					MasProximo[j] := k
				fin si
			fin para
		fin repetir ;
		devolver T
	fin función


Después de  implementar  el  algoritmo en lenguaje C,  comprobamos  su  correcto
funcionamiento:

	Matriz de adyacencia:
	0 1 8 4 7 
	1 0 2 6 5 
	8 2 0 9 5 
	4 6 9 0 3 
	7 5 5 3 0 

	Árbol de recubrimiento mínimo:
	(0, 1) (1, 2) (0, 3) (3, 4) 
	Peso total: 10

Realizamos las  mediciones  de los tiempos de ejecución del algoritmo y tratamos
de hallar sus cotas subestimada, ajustada y sobreestimada. Mediante este proceso
obtenemos las siguientes tablas:

- La primera columna indica el término n-ésimo de la sucesión.
- La segunda columna indica el tiempo de ejecución del algoritmo.
	* En las filas que aparece "k", el tiempo de ejecución es un promedio de
	  k ejecuciones.
	  

        n           t(n)      t(n)/h(n)      t(n)/g(n)      t(n)/f(n)        k
      128         78.154       0.007749       0.004770       0.002936    10000
      256        290.363       0.007714       0.004431       0.002545    10000
      512       1080.000       0.007688       0.004120       0.002208        0
     1024       5216.000       0.009949       0.004974       0.002487        0
     2048      18265.000       0.009335       0.004355       0.002032        0
     4096      71641.000       0.009810       0.004270       0.001859        0
     
Cotas: h(n)=n^1.9, g(n)=n^2, f(n)=n^2.1
La función más acotada es: n^2 al 93%
Concretamente: 0.004487*(n^2)

Otras cotas aproximadas:
(n*ln n)^0.9( 0.00%)	n*ln(n)(53.87%)	(n*ln n)^1.1(72.49%)	
n^1.9(88.56%)	n^2(93.02%)	n^2.1(81.66%)	
n^0.95( 0.00%)	n( 0.00%)	n^1.05(51.15%)	
n^1.2(56.09%)	n^1.5(73.68%)	n^2(93.02%)	
n^5( 0.00%)	

La función h(n) tiene un crecimiento ligeramente inferior a t(n),  y por ello la
serie  generada en la tabla es creciente,  con lo que deducimos que  h(n)  es la
cota subestimada. 

Por el contrario, la función f(n)  tiene un crecimiento superior al de t(n), con
lo cual la serie de la tabla es decreciente, y f(n) es la cota sobreestimada.

La función  g(n)  crece de forma similar a  t(n),  y por tanto los valores de la
tabla  tienden  a  estabilizarse  en torno a una constante.  De todas formas, el
cálculo es aproximado,  pues en ocasiones observamos algunos valores anómalos en
la medición.  Esto puede ser debido,  por ejemplo,  a interrupciones del sistema
operativo.

Para el ajuste de las cotas se emplea la biblioteca de ajuste libadjust, leer la
explicación del funcionamiento en AJUSTE.


-------------------------------- CONCLUSIONES ----------------------------------


Como era de esperar dados los bucles anidados de n-1 iteraciones que utiliza  el
algoritmo,  libadjust nos informa de una complejidad O(n^2) para el algoritmo de
Prim.

Se podría mejorar la complejidad computacional utilizando una implementación con
un montículo de mínimos de tamaño n-1. De esta forma tendríamos O(m*log(n)) para
el algoritmo, siendo  m  el número de aristas del grafo inicial.  Esta mejora se
debe a que la función  QuitarCima del montículo tiene una complejidad O(log(n)),
y a que por cada iteración del bucle voraz habría que recorrer un montículo  que
tendría cada vez un elemento menos, con lo que tenemos O(m*log(n)).

