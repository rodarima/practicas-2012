ALGORITMOS: PRÁCTICA 3.
Rodrigo Arias Mallo; login: rodrigo.arias
Carlos Pérez Ramil; login: c.pramil


Verificación empírica de los análisis de dos algoritmos de ordenación: inserción
y quicksort.


Características de la máquina donde fue realizado el experimento:
	- Procesador Intel(R) Core(TM) i7 CPU Q 720  @ 1.60GHz
	- Memoria RAM 4GB


Realizaremos un  análisis de la eficiencia de dos  algoritmos diferentes para la 
ordenación de vectores. Concretamente, para el experimento utilizaremos vectores
de números enteros. Nos  centraremos  en el estudio de los tiempos de ejecución, 
que serán medidos siempre en microsegundos.

La ordenación  por inserción es iterativa.  Se recorren los elementos del vector
uno a uno, comprobando si el actual es menor que los anteriores hasta dar con su
posición adecuada, donde se "inserta". 

Quicksort, en cambio, es un algoritmo recursivo, y emplea la técnica de divide y
vencerás.  Consiste en  comparar todos los  elementos  del vector con un pivote, 
obteniendo dos nuevos subvectores  (el de los mayores y el de los menores que el
pivote),  y aplicando quicksort de nuevo sobre ellos.  También  establecemos  un
valor umbral que comparamos con el tamaño de los subvectores. Si este  último es
inferior al umbral, no se realizan más llamadas recursivas, y se deja el trabajo
de terminar la ordenación para el algoritmo de inserción. 


	procedimiento Ordenación por inserción (var v[1..n])
		para i := 2 hasta n hacer
			x := v[i] ;
			j := i-1 ;
			mientras j > 0 y v[j] > x hacer
				v[j+1] := v[j] ;
				j := j-1
			fin mientras ;
			v[j+1] := x
		fin para
	fin procedimiento


	-------------------------------------------------------------

	procedimiento OrdenarAux (V[izq..der])
		si izq+UMBRAL <= der entonces
			Mediana3 (V[izq..der]) ;
			pivote := V[izq] ;
			i := izq ;
			j := der ;
			repetir
				repetir i := i + 1 ; hasta V[i] >= pivote ;
				repetir j := j - 1 ; hasta V[j] <= pivote ;
				intercambiar (V[i], V[j]);
			hasta j <= i ;
			intercambiar (V[i], V[j]) ;
			intercambiar (V[izq], V[j]) ;
			OrdenarAux (V[izq..j-1]);
			OrdenarAux (V[j+1..der])
		fin si
	fin procedimiento

	procedimiento Ordenación Rápida (V[1..n])
		OrdenarAux(V[1..n]);
		si (UMBRAL > 1) entonces
			Ordenación por Inserción (V[1..n])
		fin si
	fin procedimiento




Realizamos  las  mediciones  de los tiempos de ejecución de los dos algoritmos y
tratamos de hallar sus cotas  subestimada, ajustada  y  sobreestimada.  Mediante
este proceso obtenemos las siguientes tablas:

- La primera columna indica el término n-ésimo de la sucesión.
- La segunda columna indica el tiempo de ejecución del algoritmo.
	* En las filas que aparece "k", el tiempo de ejecución es un promedio de
	  k ejecuciones.
- Las cotas están identificadas en las correspondientes columnas.


La función h(n) tiene un crecimiento ligeramente inferior a t(n),  y por ello la serie  generada en la tabla es creciente,  con lo que deducimos que  h(n)  es la
cota subestimada. 

Por el contrario, la función f(n)  tiene un crecimiento superior al de t(n), con
lo cual la serie de la tabla es decreciente, y f(n) es la cota sobreestimada.

La función  g(n)  crece de forma similar a  t(n),  y por tanto los valores de la 
tabla  tienden  a  estabilizarse  en torno a una constante.  De todas formas, el
cálculo es aproximado,  pues en ocasiones observamos algunos valores anómalos en la medición.  Esto puede ser debido,  por ejemplo,  a interrupciones del sistema operativo.



-------------------------------- CONCLUSIONES ----------------------------------


