ALGORITMOS: PRÁCTICA 2.
Rodrigo Arias Mallo; login: rodrigo.arias
Carlos Pérez Ramil; login: c.pramil


Verificación empírica de los análisis de dos algoritmos para calcular la 
suma de la subsecuencia máxima.


	/	Características de la máquina donde fue realizado el experimento:	/
	/																		/
	/		- Procesador Intel(R) Core(TM) i7 CPU Q 720  @ 1.60GHz			/
	/		- Memoria RAM 4GB												/
	

Realizaremos un análisis de la eficiencia de dos algoritmos diferentes para la 
suma de la subsecuencia máxima. Nos centraremos en el estudio de los tiempos de 
ejecución, que serán medidos siempre en microsegundos.


El primer algoritmo es iterativo, y el segundo es recursivo. Aquí presentamos
ambos algoritmos:

	función sumaSubMax1 (v[1..n])
		sumaMax := 0;
		para i := 1 hasta n hacer
			estaSuma := 0 ;
			para j := i hasta n hacer
				estaSuma := estaSuma + v[j] ;
				si estaSuma > sumaMax entonces sumaMax := estaSuma
				fin si
			fin para
		fin para ;
		devolver sumaMax
	fin función

		-------------------------------------------------------------

	función sumaSubMax2 (v[1..n])
		devolver sumaSubMaxAux (v,1,n)
	fin función

	función sumaSubMaxAux (v[1..n],izq,der)
		si izq = der entonces
			si v[izq] > 0 entonces devolver v[izq]
			sino devolver 0
			fin si
		sino
			centro := (izq+der) div 2 ;
			sumDer := sumaSubMaxAux (v,centro+1,der) ;
			sumIzq := sumaSubMaxAux (v,izq,centro) ;
			sumBordeDer := 0; sumAux := 0;
			para i := centro+1 hasta der hacer
				sumAux := sumAux + v[i];
				si sumAux > sumBordeDer entonces sumBordeDer := sumAux
				fin si
			fin para
			sumBordeIzq := 0; sumAux := 0;
			para i := centro hasta izq paso -1 hacer
				sumAux := sumAux + v[i];
				si sumAux > sumBordeIzq entonces sumBordeIzq := sumAux
				fin si
			fin para;
			devolver max(sumIzq, sumDer, sumBordeIzq + sumBordeDer)
		fin si
	fin función
	

Los implementamos en lenguaje C y comprobamos que funcionan correctamente con 
las secuencias de enteros propuestas:

		Esperado  ssm1  ssm2
		   6       6     6
		  20      20    20
		   0       0     0
		   9       9     9
		  20      20    20
		  15      15    15


Posteriormente medimos los tiempos de ejecución de los dos algoritmos y tratamos
de hallar sus cotas subestimada, ajustada y sobreestimada. Mediante este proceso
obtenemos las siguientes tablas:

	- La primera columna indica el término n-ésimo de la sucesión
	- La segunda columna indica el tiempo de ejecución del algoritmo
	  * En las filas que aparece "k", el tiempo de ejecución es un promedio de k
	    ejecuciones
	- Las cotas están identificadas en las correspondientes columnas
	
Tabla sumaSubMax1:	h(n) = n^1.8; g(n) = n^2; f(n) = n^2.2

        n           t(n)      t(n)/h(n)      t(n)/g(n)      t(n)/f(n)        k
      512       1782.000       0.023671       0.006798       0.001952
     1024       5643.000       0.021526       0.005382       0.001345
     2048      10535.000       0.011541       0.002512       0.000547
     4096      41702.000       0.013119       0.002486       0.000471
     8192     155975.000       0.014091       0.002324       0.000383
    16384     619444.000       0.016071       0.002308       0.000331
    32768    2465725.000       0.018371       0.002296       0.000287

							SUBESTIMADA		  AJUSTADA	 SOBREESTIMADA


En esta primera tabla comprobamos que la función h(n) tiene un crecimiento 
ligeramente inferior a t(n), y por ello la serie generada en la tabla es 
creciente, con lo que deducimos que h(n) es la cota subestimada. Debemos deses-
timar los valores de las dos primeras filas, puesto que se presentan demasiado
altos.

Por el contrario, la función f(n) tiene un crecimiento superior al de t(n), con
lo cual la serie de la tabla es decreciente, y f(n) es la cota sobreestimada.

La función g(n) crece de forma similar a t(n), y por tanto los valores de la 
tabla tienden a una constante de valor 0.0023. De todas formas, el cálculo es
aproximado, ya que se observan algunos valores anómalos en la medición, concre-
tamente en las filas correspondientes al término n=512 y n=1024.



Tabla sumaSubMax2: 
h(n) = n * log(n)^0.1; g(n) = n * log(n)^0.57; f(n) = n * log(n)^0.95

        n           t(n)      t(n)/h(n)      t(n)/g(n)      t(n)/f(n)        k
      512         56.965       0.092647       0.039187       0.019544    10000
     1024        113.600       0.091411       0.036797       0.017632    10000
     2048        239.646       0.095503       0.036760       0.016988    10000
     4096        495.770       0.097931       0.036184       0.016178    10000
     8192       1027.000       0.100624       0.035807       0.015529
    16384       2122.000       0.103188       0.035462       0.014953
    32768       4354.000       0.105135       0.034978       0.014367

							SUBESTIMADA		  AJUSTADA	 SOBREESTIMADA

Procedemos de forma similar para analizar este segundo algoritmo, y observamos
también una cota subestimada -h(n)- y una sobreestimada -f(n)- perfectamente 
definidas.

En este caso, la cota ajustada g(n) converge hacia 0.035, a pesar de que se
observa una anomalía en la primera fila de la tabla.


-------------------------------- CONCLUSIONES ----------------------------------

Tras analizar las tablas de tiempos determinamos que el algoritmo sumaSubMax2, 
que es recursivo, es sustancialmente más eficiente que sumaSubMax1, de tipo 
iterativo. Por ejemplo, para el término n=4096, sumaSubMax1 tarda más de
40000micros, mientras que sumaSubMax2 todavía está en tiempos inferiores a 
1micros, con lo que tiene que entrar en el bucle. En la última ejecución vemos
que sumaSubMax2 tarda 4000micros, pero sumaSubMax1 supera los 2000000. Por tanto
comprobamos que sumaSubMax2 es claramente más rápido.

